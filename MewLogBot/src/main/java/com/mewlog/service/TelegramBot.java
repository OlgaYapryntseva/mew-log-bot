package com.mewlog.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.mewlog.configuration.BotConfig;
import com.mewlog.repository.AnimalRepository;
import com.mewlog.repository.OwnerRepository;
import com.mewlog.repository.model.Animal;
import com.mewlog.repository.model.Logs;
import com.mewlog.repository.model.Owner;
import com.mewlog.service.buttoncrafter.ButtonCrafterService;
import com.mewlog.service.invitation.InvitationService;
import com.mewlog.service.reports.ReportsService;
import com.mewlog.service.reports.dto.ReportLogDto;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

@Component
public class TelegramBot extends TelegramLongPollingBot {

	@Autowired
	OwnerRepository ownerRepository;

	@Autowired
	AnimalRepository animalRepository;

	@Autowired
	InvitationService invitationService;

	@Autowired
	ButtonCrafterService buttonCrafterService;

	@Autowired
	ReportsService reportsService;

//	final String LINK = "https://t.me/MewLogBot";

	final Logger logger = LoggerFactory.getLogger(TelegramBot.class);
	final Map<Long, Boolean> waitingForAnimalName = new HashMap<>();
	final Map<Long, Boolean> waitingForLogList = new HashMap<>();
	final Map<Long, Boolean> waitingForLogPrivate = new HashMap<>();
	final Map<Long, String> logOptions = new HashMap<>();
	final BotConfig config;

	@SuppressWarnings("deprecation")
	public TelegramBot(BotConfig config) {
		this.config = config;
		List<BotCommand> listBbotCommand = new ArrayList<>();
		listBbotCommand.add(new BotCommand("/start", "–Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"));
		listBbotCommand.add(new BotCommand("/invitation", "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Ö–æ–∑—è–∏–Ω–∞"));
		listBbotCommand.add(new BotCommand("/report", "—Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"));
		listBbotCommand.add(new BotCommand("/about", "—É–∑–Ω–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"));
		listBbotCommand.add(new BotCommand("/help", "–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö"));
		try {
			this.execute(new SetMyCommands(listBbotCommand, new BotCommandScopeDefault(), null));
		} catch (TelegramApiException e) {
			logger.error("Error setting bot's command list: " + e.getMessage());
		}
	}

	@Override
	public String getBotToken() {
		return config.getBotToken();
	}

	@Override
	public String getBotUsername() {
		return config.getBotUserName();
	}

	@Override
	public void onUpdateReceived(Update update) {
		if (update.hasMessage() && update.getMessage().hasText()) {
			String messageText = update.getMessage().getText();
			long chatId = update.getMessage().getChatId();

			if (waitingForAnimalName.getOrDefault(chatId, false)) {
				handleAnimalNameInput(chatId, update, messageText);
				return;
			}

			if (waitingForLogList.getOrDefault(chatId, false)) {
				handleLogEntryInput(chatId, messageText);
				return;
			}

			if (waitingForLogPrivate.getOrDefault(chatId, false)) {
				handleLogEntryInput(chatId, messageText);
				return;
			}

			if (messageText.startsWith("token=")) {
				String token = extractToken(messageText);
				if (token != null) {
					sendMessage(chatId, invitationService.handleInvitation(token, chatId));
				} else {
					sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏");
				}
			}
			switch (messageText) {
			case "/start":
				startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
				break;
			case "/invitation":
				invitationCommandReceived(chatId);
				break;
			case "/report":
				reportCommandReceived(chatId);
				break;
			case "/about":
				aboutCommandReceived(chatId);
				break;
			case "/help":
				helpCommandReceived(chatId);
				break;
			case "/cancel":
				cancelCommandReceived(chatId);
				break;
			default:
				sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!üêæ");
			}
		} else if (update.hasCallbackQuery()) {
			String callbackData = update.getCallbackQuery().getData();
			long chatId = update.getCallbackQuery().getMessage().getChatId();
			if ("add animal".equals(callbackData)) {
				addAnimalCommandReceived(chatId);
			} else if ("add log".equals(callbackData)) {
				showLogOptions(chatId);
			} else if ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ".equals(callbackData)) {
				addLogPrivate(chatId);
			} else if (waitingForLogList.getOrDefault(chatId, false)) {
				handleLogEntryInput(chatId, callbackData);
			}  else if ("–¥–µ–Ω—å".equals(callbackData) || "–º–µ—Å—è—Ü".equals(callbackData) || "–≥–æ–¥".equals(callbackData)) {
				handleReportPeriod(chatId, callbackData);
			} else if (callbackData.contains("–æ—Ç—á–µ—Ç")) {
				handleReportTypePeriod(chatId, callbackData);
			}
		}
	}

	private void handleReportTypePeriod(long chatId, String callbackData) {
		String answer = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ—à–∞—á—å–µ–≥–æ –æ—Ç—á–µ—Ç–∞! üêæüìÖ";
		sendMessage(chatId, answer);
	}

	private void handleReportPeriod(long chatId, String callbackData) {
		LocalDateTime now = LocalDateTime.now();
        LocalDateTime start = now.with(LocalTime.MIN);
        LocalDateTime end = now.with(LocalTime.MAX);
        if(callbackData.equals("–º–µ—Å—è—Ü")) {
            start = now.minusMonths(1).with(LocalTime.MIN);
        } else if(callbackData.equals("–≥–æ–¥")) {
            start = now.minusYears(1).with(LocalTime.MIN);
        }

		List<ReportLogDto> reportLogs = reportsService.fingMessageByPeriod(chatId, start, end);
		String data = reportLogs.stream()
                .map(r -> "\n" + r.getDateCreate() + " - " + r.getMessage())
                .collect(Collectors.joining());
		sendMessage(chatId, data.isEmpty() ? "–£–ø—Å, –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø—É—Å—Ç–æ! üêæ" : "<b>–û—Ç—á–µ—Ç –∑–∞ " + callbackData + ": </b>" + data);		
	}

	private void reportCommandReceived(long chatId) {
		InlineKeyboardMarkup showReportType = buttonCrafterService.showReportTypeOptions(chatId);
		String answer = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ—à–∞—á—å–µ–≥–æ –æ—Ç—á–µ—Ç–∞! üêæüìÖ";
		sendMessage(chatId, answer, showReportType);
	}

	private void startCommandReceived(long chatId, String name) {
		String answer = "<b><i>–ú—è—É, " + name + "! üêæ </i></b> \n–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! üò∫";
		sendMessage(chatId, answer);
	}

	private void invitationCommandReceived(long chatId) {
		Animal animal = animalRepository.findByOwnersId(chatId);
		String inviteLink = invitationService.generateInvitationLink(animal.getAnimalId());
		sendMessage(chatId, "–©–µ–ª–∫–Ω–∏ –ø–æ —Å—Å—ã–ª–∫–µ: " + config.getBotLink() + "\n" + "–∏ –æ—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: \n");
		sendMessage(chatId, inviteLink);
	}

	private void helpCommandReceived(long chatId) {
		String answer = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n" + "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
				+ "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
				+ "/invitation - –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Ö–æ–∑—è–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–∞.\n\n"
				+ "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.\n\n"
				+ "/about - –£–∑–Ω–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.\n\n"
				+ "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å.\n\n"
				+ "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.";
		sendMessage(chatId, answer);
	}

	private void aboutCommandReceived(long chatId) {
		String answer = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b><i>MewLogBot</i></b>, –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–∞—à–∏–º –ø—É—à–∏—Å—Ç—ã–º –¥—Ä—É–≥–æ–º! üéâ\n\n"
				+ "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤—Å–µ–º–∏ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –≤ –∂–∏–∑–Ω–∏ –≤–∞—à–µ–≥–æ –∫–æ—Ç–∞: \n\n"
				+ "üê± –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏–π —Ç—É–∞–ª–µ—Ç–∞: –£–∑–Ω–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –≤–∞—à –∫–æ—Ç–∏–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ—Å–µ—â–∞–ª –ª–æ—Ç–æ–∫.\n\n"
				+ "üßº –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–µ –ª–æ—Ç–∫–∞: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ª–æ—Ç–æ–∫ –±–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–∏–º —É–¥–æ–±–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º.\n\n"
				+ "üç≤ –ö–æ—Ä–º–ª–µ–Ω–∏–µ: –í–µ–¥–∏—Ç–µ —É—á–µ—Ç, –∫–æ–≥–¥–∞ –∏ —á–µ–º –≤—ã –∫–æ—Ä–º–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ª—é–±–∏–º—Ü–∞.\n\n"
				+ "üèãÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ—Ç–∞!\n\n"
				+ "<b><i>MewLogBot</i></b> ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–∞—à –∫–æ—Ç –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ–≥–æ! üíñ ";
		sendMessage(chatId, answer);
	}

	private void cancelCommandReceived(long chatId) {
		waitingForAnimalName.remove(chatId);
		waitingForLogList.remove(chatId);
		waitingForLogPrivate.remove(chatId);
		logOptions.remove(chatId);
		sendMessage(chatId, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
	}

	private void handleAnimalNameInput(long chatId, Update update, String animalName) {
		if (waitingForAnimalName.containsKey(chatId)) {
			Animal animal = new Animal();
			animal.setAnimalName(animalName);
			animal.addOwnerId(chatId);
			animalRepository.save(animal);
			Owner owner = new Owner(chatId, update.getMessage().getChat().getFirstName());
			owner.addAnimal(animal.getAnimalId());
			ownerRepository.save(owner);
			waitingForAnimalName.remove(chatId);
			sendMessage(chatId, "<b>–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏! üéâ</b>");
		}
	}

	private void handleLogEntryInput(long chatId, String logEntry) {
		if (waitingForLogList.containsKey(chatId) && logEntry != null) {
			Animal animal = animalRepository.findByOwnersId(chatId);
			if (animal != null) {
				Logs log = new Logs();
				log.setMessage(logEntry);
				animal.addLog(log);
				animalRepository.save(animal);
				waitingForLogList.remove(chatId);
				logOptions.remove(chatId);
				sendMessage(chatId, logEntry);
				sendMessage(chatId, "<i>–ú—è—É - —ç—Ç–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ! ‚úî</i>");
			} else {
				sendMessage(chatId, "–í–∞—à –ø–∏—Ç–æ–º–µ—Ü —Å–ø—Ä—è—Ç–∞–ª—Å—è! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! üôÄ");
			}
		}
	}

	private void addAnimalCommandReceived(long chatId) {
		sendMessage(chatId, "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –ø—É—à–∏—Å—Ç–∏–∫–∞? ");
		waitingForAnimalName.put(chatId, true);
	}

	private void addLogPrivate(long chatId) {
		sendMessage(chatId, "–ú—è—É üêà‚Äç‚¨õ , –ø–∏—à–∏ ... ");
		waitingForLogPrivate.put(chatId, true);
	}

	private void sendMessage(long chatId, String textToSend) {
		SendMessage message = new SendMessage();
		message.setChatId(String.valueOf(chatId));
		message.setText(textToSend);
		message.setParseMode(ParseMode.HTML);
		if (textToSend.contains("–ú—è—É")) {
			message.setReplyMarkup(buttonCrafterService.createInlineKeyboard(chatId));
		}
		if (textToSend.contains("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–∞—à–µ–≥–æ –∫–æ—à–∞—á—å–µ–≥–æ –æ—Ç—á–µ—Ç–∞")) {
			message.setReplyMarkup(buttonCrafterService.showReportOptions(chatId));
		}
		try {
			execute(message);
		} catch (TelegramApiException e) {
			logger.error("Error occurred while sending message: ", e);
		}
	}

	private void sendMessage(long chatId, String textToSend, InlineKeyboardMarkup keyboardMarkup) {
		SendMessage message = new SendMessage();
		message.setChatId(String.valueOf(chatId));
		message.setText(textToSend);
		message.setReplyMarkup(keyboardMarkup);
		message.setParseMode(ParseMode.HTML);
		try {
			execute(message);
		} catch (TelegramApiException e) {
			logger.error("Error occurred while sending message: ", e);
		}
	}

	private void showLogOptions(long chatId) {
		sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ: ", buttonCrafterService.showLogOptions(chatId));
		waitingForLogList.put(chatId, true);
	}

	private String extractToken(String url) {
		Pattern pattern = Pattern.compile("token=([^&]+)");
		Matcher matcher = pattern.matcher(url);
		if (matcher.find()) {
			return matcher.group(1);
		}
		return null;
	}
}
